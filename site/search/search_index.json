{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docker","text":""},{"location":"#objective-of-this-documentation","title":"Objective of this documentation","text":"<p>Hello Guys, If you are reading this documentation then you might be wondering about the reason for creating this doc. Well, When I started building projects and web apps I was using github. But as a team for better scalability of project and easy version control over various functionalities you will eventually have to learn docker. This documentation will guide you to dockerize your mern web-app. </p>"},{"location":"#what-is-a-container","title":"What is a container?","text":"<p>\u201cA container is the standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. \u201d</p> <p>This tool becomes very useful during the development phase. As many developers are involved in the process, it often becomes a hefty task of setting up the environment to run the project, as each project comes with their list of dependencies along with the specified versions.</p> <p>A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings. Container images become containers at runtime and in the case of Docker containers \u2014 images become containers when they run on Docker Engine.</p>"},{"location":"#docker-hub","title":"Docker Hub","text":"<p>Docker Hub is a cloud-based repository service provided by Docker in which users create, test, store and distribute container images. Through Docker Hub, a user can access public, open-source image repositories, as well as use space to create their own private repositories, automated build functions, webhooks and workgroups.</p>"},{"location":"#getting-started-with-the-integration","title":"Getting Started with the Integration","text":"<p>Our main focus in this tutorial is understanding how to integrate Docker with a MERN Stack Application. For explaining this, let\u2019s try to dockerize an E-Commerce Web Application.</p>"},{"location":"#overview","title":"Overview","text":"<p>We are going to Dockerize Node.JS, React, and MongoDB into separate containers. Then we are going to use DOCKER COMPOSE to run the multi-container application.</p> <p>At last, from a single command, we can create and start all the services from our configuration.</p>"},{"location":"#initializing-the-project","title":"Initializing the Project","text":"<p>Clone the GitHub link to a local folder in your computer. Open the folder using VSCode or any text editor of your choice.</p>"},{"location":"#docker-files","title":"Docker Files","text":"<p>Now, we need to create a Dockerfile for the server and the client. The Dockerfile essentially contains the build instructions to build the image.</p> <p>Let\u2019s start by creating the Dockerfile for the client (our React Frontend).</p> <p>In the client folder, create a file called Dockerfile without any extension. Write the following lines of code in the file:</p> <pre><code># Dockerfile for React client\n\n# Build react client\nFROM node:10.16-alpine\n\n# Working directory be app\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\n###  Installing dependencies\n\nRUN npm install --silent\n\n# copy local files to app folder\nCOPY . .\n\nEXPOSE 3000\n\nCMD [\"npm\",\"start\"]\n</code></pre> <p>We can simply build our Frontend with this command</p> <p><code>docker build -t react-app .</code></p> <p>To verify everything is fine, we run our newly built container using the command:<code>docker run -p 3000:3000 react-app</code> . This will run just the Frontend.</p> <p>In the same way, we create a file called Dockerfile for the Backend Server.</p> <p>Now, we create a Dockerfile for the server directory. Write the following lines of code in the file:</p> <pre><code>#  Dockerfile for Node Express Backend\n\nFROM node:10.16-alpine\n\n# Create App Directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\n# Install Dependencies\nCOPY package*.json ./\n\nRUN npm install --silent\n\n# Copy app source code\nCOPY . .\n\n# Exports\nEXPOSE 5000\n\nCMD [\"npm\",\"start\"]\n</code></pre> <p>We can simply build our Backend with this command:</p> <p><code>docker build -t node-app .</code></p> <p>Tips:- <code>If you are new to docker then start by dockerizing single image at a time. In easy word you can start by building a docker image for frontend or backend (your choice). Once you get the idea then you can build multiple images and learn the concept of docker compose to run multiple images.</code></p>"},{"location":"dockerexplained/","title":"Explaning Docker in easiest way","text":"<p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all of the parts it needs, such as libraries and other dependencies, and ship it all out as one package.</p> <p>The Docker daemon is a service that runs on your host operating system. It currently only runs on Linux because it depends on a number of Linux kernel features, but there are a few ways to run Docker on MacOS and Windows too. TheDocker daemon itself exposes a REST API.</p> <p>Docker container is an open source software development platform. Its main benefit is to package applications in \u201ccontainers,\u201d allowing them to be portable among any system running the Linux operating system (OS).</p> <p>Docker Hub is a cloud-based registry service which allows you to link to code repositories, build your images and test them, stores manually pushed images, and links to Docker Cloud so you can deploy images to your hosts.</p> <p>The result from adopting docker, or container, is that application can be deployed or undeployed faster, start and stop faster, change to another \u201cimage\u201d faster, process and do many things faster.</p> <p><code>I hope this article will help you understanding the basic docker fundamental.</code></p>"},{"location":"page2/","title":"Docker Compose","text":""},{"location":"page2/#docker-compose","title":"Docker Compose","text":"<p>\u201cCompose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration.\u201d</p> <p>To run our entire application together, i.e run all containers parallelly, we need to configure the docker-compose file.</p> <p>In the main directory of the project, (outside the server/client) create a file named docker-compose.yml . Write these contents into the file.</p> <pre><code>version: '3.7'\n\nservices:\n  server:\n    build:\n      context: ./server\n      dockerfile: Dockerfile\n    image: myapp-server\n    container_name: myapp-node-server\n    command: /usr/src/app/node_modules/.bin/nodemon server.js\n    volumes:\n      - ./server/:/usr/src/app\n      - /usr/src/app/node_modules\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - mongo\n    env_file: ./server/.env\n    environment:\n      - NODE_ENV=development\n    networks:\n      - app-network\n  mongo:\n    image: mongo\n    volumes:\n      - data-volume:/data/db\n    ports:\n      - \"27017:27017\"\n    networks:\n      - app-network\n  client:\n    build:\n      context: ./client\n      dockerfile: Dockerfile\n    image: myapp-client\n    container_name: myapp-react-client\n    command: npm start\n    volumes:\n      - ./client/:/usr/app\n      - /usr/app/node_modules\n    depends_on:\n      - server\n    ports:\n      - \"3000:3000\"\n    networks:\n      - app-network\n\nnetworks:\n    app-network:\n        driver: bridge\n\nvolumes:\n    data-volume:\n    node_modules:\n    web-root:\n      driver: local\n</code></pre> <p>Creating the Build To create the build for the entire application, we need to run the following command: <code>docker-compose build</code></p> <p>Starting the Services We can start the multi-container system using the following simple command: <code>docker-compose up</code></p> <p>At last, we can open <code>http://localhost:3000</code> to see our React Frontend.</p> <p>The backend server is live on <code>http://localhost:5000</code></p> <p>And MongoDB is running on <code>http://localhost:27017</code></p>"},{"location":"page2/#maintenance-inspection","title":"Maintenance &amp; Inspection","text":"<p>We can inspect running services using the <code>docker-compose ps</code> command.</p> <p>The docker-compose logs will dump logs of all the running services.</p>"},{"location":"page2/#stopping-the-containers","title":"Stopping the containers","text":"<p>To stop all the services, we use <code>docker-compose stop</code>.</p> <p>Using <code>docker-compose down --volumes</code> brings everything down, removing the containers entirely, with the data volume of the services.</p>"}]}